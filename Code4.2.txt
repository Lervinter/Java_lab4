import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class DecoderTest {

    public static String decodeVowels(String encryptedWord) {
        return encryptedWord
                .replaceAll("a", "1")
                .replaceAll("e", "2")
                .replaceAll("i", "3")
                .replaceAll("o", "4")
                .replaceAll("u", "5");
    }

    public static String decodeConsonants(String encryptedWord) {
        StringBuilder decodedWord = new StringBuilder();
        char[] chars = encryptedWord.toCharArray();
        for (char c : chars) {
            if (isConsonant(c)) {
                decodedWord.append(getNextConsonant(c));
            } else {
                decodedWord.append(c);
            }
        }
        return decodedWord.toString();
    }

    private static boolean isConsonant(char c) {
        return Character.isLetter(c) && "aeiouAEIOU".indexOf(c) == -1;
    }

    private static char getNextConsonant(char c) {
        char nextChar = (char) (c + 1);
        if (Character.isLetter(nextChar)) {
            if ("aeiouAEIOU".indexOf(nextChar) != -1) {
                return (char) (nextChar + 1);
            }
            return nextChar;
        } else {
            return c;
        }
    }

    public static String decodeMessage(String encryptedMessage) {
        String[] words = encryptedMessage.split("\\s+");
        StringBuilder decodedMessage = new StringBuilder();

        for (String word : words) {
            if (word.matches("[aeiouAEIOU]+")) {
                decodedMessage.append(decodeVowels(word)).append(" ");
            } else if (word.matches("[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+")) {
                decodedMessage.append(decodeConsonants(word)).append(" ");
            } else {
                decodedMessage.append(word).append(" ");
            }
        }

        return decodedMessage.toString().trim();
    }

    @Test
    void testDecodeVowels() {
        assertEquals("h2ll4", decodeVowels("hello"));
        assertEquals("w5rld", decodeVowels("world"));
        assertEquals("b1ttl2", decodeVowels("bottle"));
    }

    @Test
    void testDecodeConsonants() {
        assertEquals("t2st3ng", decodeConsonants("vetviph"));
        assertEquals("j2v1scr3pt", decodeConsonants("javascript"));
        assertEquals("l1n2x", decodeConsonants("kmnyw"));
    }

    @Test
    void testDecodeMessage() {
        assertEquals("h2ll4 w5rld", decodeMessage("h2ll4 w5rld"));
        assertEquals("hello world", decodeMessage("h2ll4 w5rld"));
        assertEquals("testing programming", decodeMessage("t2st3ng pr4gr1mm3ng"));
        assertEquals("decode this", decodeMessage("d3c4d5 th3s"));
        assertEquals("J2v1Scr3pt", decodeMessage("J2v1Scr3pt"));
    }
}
